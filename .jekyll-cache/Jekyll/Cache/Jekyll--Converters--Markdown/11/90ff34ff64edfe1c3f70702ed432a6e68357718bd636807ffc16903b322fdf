I"òR<h2 id="introduction-to-cellular-automata-and-the-game-of-life">Introduction to Cellular Automata and The Game of Life</h2>

<p>Â Â Â Â  In 1970, a British Mathematician by the name of John Conway devised a 0 player game known as â€˜The Game of Lifeâ€™. Unbeknownst to him, the simple game would soon take researchers and math enthusiasts alike by storm. The game was an example of what is known as a cellular automaton, or a grid containing cells that evolve over time according to a set of rules driven by the state of the cell and its neighbors. The initial configuration, or initial states of the cells before evolving, is determined by assigning each cell a state manually. After that, the game commences and the cells start to evolve. For GOL (the Game of Life), there are 2 possible states for each cell, namely â€˜deadâ€™ or â€˜aliveâ€™. As for what is considered a neighboring cell, GOL follows what is known as Mooreâ€™s neighborhood, where any cells neighbors are the 8 surrounding cells to it.</p>

<div class="figure">
    <img src="/assets/images/GOL/Fig-1.png" style="height: 200px; display: block; margin: 0 auto;" />
    <div class="caption">
        <span class="caption-label">Figure 1.</span> A representation of Moore's neighborhood. The red cells are neighbors of the white cell in the center.
    </div>
</div>

<p>The rules for evolution in GOL are also quite simple:</p>
<ul>
  <li>Any live cell with fewer than two live neighbors dies, as if by underpopulation.</li>
  <li>Any live cell with two or three live neighbors lives on to the next generation.</li>
  <li>Any live cell with more than three live neighbors dies, as if by overpopulation.</li>
  <li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>
</ul>

<div class="figure">
    <div class="center"><iframe src="https://imgflip.com/embed/6bq06n"></iframe></div>
    <div class="caption">
        <span class="caption-label">Figure 2.</span> This shows the evolution of a simple initial configuration. Here, black represents a dead cell, and white represents a living one. The structure first seems to grow almost randomly until almost abruptly, many cells die according to rule 3.
    </div>
</div>

<h2 id="programming-gol">Programming GOL</h2>

<p>Understanding GOL can be significantly easier with an interactive version of the game. Luckily, such a simple system is quite easy to program. In fact, the GIF above was generated with some code I wrote. In p5.js, the most straightforward way to do this is to generate a 2d array that represents the grid. Each element is either a <code class="highlighter-rouge">0</code> or a <code class="highlighter-rouge">1</code>. We can then draw the grid every frame like so:</p>

<div class="language-javascript code highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">drawCells</span><span class="p">(){</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">*</span> <span class="nx">resolution</span><span class="p">;</span>
      <span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">j</span> <span class="o">*</span> <span class="nx">resolution</span><span class="p">;</span>
      <span class="nx">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">grid</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fill</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="nx">stroke</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
      <span class="nx">rect</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">resolution</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">resolution</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Then to update this grid, we can create an empty new 2d array. For each element in the new array we store the state of its corresponding cell in the next generation. Then, we can simply set our grid array to the new array. Notice, how we cannot directly start updating the state of every element in the grid array as that would lead to a cellâ€™s neighbor being changed before itself. This could cause some unexpected behavior. For this reason, we call GOL a <em>synchronous</em> cellular automaton. We can write a function for updating the grid like so:</p>

<div class="language-javascript code highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">update</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">next</span> <span class="o">=</span> <span class="nx">make2DArray</span><span class="p">(</span><span class="nx">cols</span><span class="p">,</span> <span class="nx">rows</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      
      <span class="kd">let</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">grid</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
      <span class="kd">let</span> <span class="nx">neighbors</span> <span class="o">=</span> <span class="nx">countNeighbors</span><span class="p">(</span><span class="nx">grid</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">state</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">neighbors</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">next</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">state</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">neighbors</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">||</span> <span class="nx">neighbors</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">next</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">next</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">state</span><span class="p">;</span>
      <span class="p">}</span>
      
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">grid</span> <span class="o">=</span> <span class="nx">next</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">countNeighbors</span><span class="p">(</span><span class="nx">grid</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">col</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">cols</span><span class="p">)</span> <span class="o">%</span> <span class="nx">cols</span><span class="p">;</span>
      <span class="kd">let</span> <span class="nx">row</span> <span class="o">=</span> <span class="p">(</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">j</span> <span class="o">+</span> <span class="nx">rows</span><span class="p">)</span> <span class="o">%</span> <span class="nx">rows</span><span class="p">;</span>
      <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">grid</span><span class="p">[</span><span class="nx">col</span><span class="p">][</span><span class="nx">row</span><span class="p">];</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">sum</span> <span class="o">-=</span> <span class="nx">grid</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="p">];</span>
  <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Now we can simply call <code class="highlighter-rouge">draw()</code> every frame and call <code class="highlighter-rouge">update()</code> every time the user presses a key. To make the program interactive, we can simply make a cell live, if it has been clicked by the user with the following code:</p>

<div class="language-javascript code highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">mousePressed</span><span class="p">(){</span>
  <span class="nx">grid</span><span class="p">[</span><span class="nx">floor</span><span class="p">(</span><span class="nx">mouseX</span><span class="o">/</span><span class="nx">resolution</span><span class="p">)][</span><span class="nx">floor</span><span class="p">(</span><span class="nx">mouseY</span><span class="o">/</span><span class="nx">resolution</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div></div>

<p>Alas, we have a working simulation. I encourage you to run the code yourself with <a href="https://editor.p5js.org/ahmadsafibilal2007@gmail.com/sketches/QHX0dUtdx">this URL</a> and experiment with GOL before we dive into building a fully Turing complete computer with it.</p>

<h2 id="signals">Signals</h2>
<p>Â Â Â Â  Before we attempt to build a computer with GOL, we need to understand exactly how computers actually work. The main part of the computer responsible for computations is the processor. It takes in electrical signals which represent binary digits (i.e. digits of <code class="highlighter-rouge">0</code>â€™s and <code class="highlighter-rouge">1</code>â€™s) and can manipulate them with special circuits known as <em>logic gates</em>. These logic gates provide the building blocks of all programs in a computer.</p>

<p>Â Â Â Â  Of course, in GOL, there are no electrical signals. We have to instead find another way to represent binary digits. We would need some structure of cells that can be easily created and destroyed as well as traverse the grid in a similar fashion to electrical signals. Then to represent binary digits, we could create a stream of these structures, generating a new one every $n$ generations and putting it into the stream. If we find the structure every $n$ generations at some receiving end of the stream, the generator is working and we may consider that <code class="highlighter-rouge">1</code> has been represented; If not, then the stream has been interrupted, signifying <code class="highlighter-rouge">0</code>.</p>

<p>Â Â Â Â  Fortunately, such a structure has already been discovered by MIT professor Bill Gosper, in the late 1970â€™s. It is known as a â€˜Gliderâ€™ and is generated by a â€˜Glider Gunâ€™. These gliders evolve seemingly randomly, however after 4 generations they resemble their original appearance only shifted one cell diagonally. Due to this geometric translation, over time they can traverse the grid, allowing them to â€˜carry signalsâ€™.</p>

<div class="figure">
    <img src="/assets/images/GOL/Fig-3.png" style="width: 100%; display: block; margin: 0 auto;" />
    <div class="caption">
        <span class="caption-label">Figure 3.</span> This shows how a glider evolves. Every 5th generation, the glider comes back to the same shape but only shifted one cell to the right, and one cell down. In the figure, $t$ represents time (i.e. the generation number) and a white cell represents a live cell. By $t=12$, the glider has traversed well across the grid, reaching the bottom of it.
    </div>
</div>

<div class="figure">
    <div class="center"><iframe src="/assets/images/GOL/fig-4.gif" style="height:250px ; width:250px"></iframe></div>
    <div class="caption">
        <span class="caption-label">Figure 4.</span> This shows a glider in action, as it traverses the grid diagonally downwards. Flipping it would allow it to traverse the other way around.  
    </div>
</div>

<p>Â Â Â Â  Gospel Glider Guns (glider guns of the original model invented by Bill Gosper) have a much more complex looking shape. They work by repeatedly colliding with each other in a very specific way, that allow for a new glider to be generated every 30 generations.</p>
<div class="figure">
    <div class="center"><iframe src="/assets/images/GOL/fig-5.gif" style="height: 180px; width: 250px"></iframe></div>
    <div class="caption">
        <span class="caption-label">Figure 5.</span> This shows the workings of a glider gun as it produces a glider every 30 generations, sending it into a diagonal stream. The structures that are traversing the grid and leaving the frame at the bottom right are the gliders.
    </div>
</div>

<p>Gospel Glider Guns, in their purest form, cannot â€˜pauseâ€™ for 30 generations to create a large gap that could represent the binary digit <code class="highlighter-rouge">0</code> in the stream. However, gliders do have some special properties which we can utilize to intercept a stream and create logic gates.</p>

<h2 id="logic-gates">Logic Gates</h2>

<p>Â Â Â Â  <em>This post would be too long if I started to explain logic gates from scratch, so instead I made another post for it. I highly encourage you to go through it before reading this section.</em></p>

<p>Â Â Â Â  As of now, the stream of gliders we have created with glider guns can only represent the binary digit <code class="highlighter-rouge">1</code>. To represent <code class="highlighter-rouge">0</code>, we need a way to intercept the original input stream and destroy the gliders within it. Luckily, gliders have a unique property that can help us do just that. If a glider collides with another glider, they will annihilate each other under the following conditions:</p>
<ul>
  <li>One glider is one cell lower than the other</li>
  <li>The distance between the gliders is an odd number</li>
</ul>

<div class="figure">
    <img src="/assets/images/GOL/Fig-6.png" style="width: 40%; display: block; margin: 0 auto;" />
    <div class="caption">
        <span class="caption-label">Figure 6.</span> This depicts the conditions under which two gliders will destroy each other.
    </div>
</div>

<div class="figure">
    <div class="center"><iframe src="/assets/images/GOL/fig-7.gif" style="height: 180px; width: 250px"></iframe></div>
    <div class="caption">
        <span class="caption-label">Figure 7.</span> This shows two gliders colliding under the given conditions.
    </div>
</div>

<p>Â Â Â Â  We can use this to pretty easily create a NOT gate. All we have to do is have an input stream of gliders which would contain gliders if the input is <code class="highlighter-rouge">1</code>. We can then set up a glider gun to create a constant stream of gliders perpendicular to the input stream. We can treat the part of the new stream which comes after the intersection of the two streams, as the output stream. Then, if the input stream is <code class="highlighter-rouge">1</code>, the gliders from the new stream will be destroyed at the intersection. If not, they will pass through, inverting the signal. Since it is understood how gliders and glider guns work, figures after this which do not introduce a new idea, will use a diagrammatic representation of the systems.</p>

<div class="figure">
    <div class="center"><img src="/assets/images/GOL/fig-8.gif" style="height:auto; width:250" /></div>
    <div class="caption">
        <span class="caption-label">Figure 8.</span> This shows a diagrammatic representation of a NOT gate. The red boxes depict glider guns and the blue circles depict gliders. The left gun's stream may be considered the input. The portion of the stream of the right gun that extends after the intersection may be considered the output. With the input gun on, the input stream fills representing `1`. It blocks the output stream from filling and hence turns the output stream to `0`. Then, when we remove the input gun, turning the input to `0`, the output stream is un-blocked and fills. Hence, the input signal has been inverted and we have created the NOT gate.
    </div>
</div>

<p>Â Â Â Â  AND gates can also be created similarly. However, for the AND gate weâ€™ll use one additional component known as the â€˜glider eaterâ€™. A glider eater, as the name suggests, can destroy a glider without changing shape or moving. This way, we can create new streams that help us in creating the logic gate, without having the streams go on indefinitely. This is useful because as we increase the complexity of our circuits by chaining logic gates, we donâ€™t want streams going all over the place. The only stream  which we will not stop with a glider eater, is the main input and output stream.</p>

<div class="figure">
    <div class="center"><img src="/assets/images/GOL/fig-9.gif" style="height:auto; width:250" /></div>
    <div class="caption">
        <span class="caption-label">Figure 9.</span> A glider eater in action.
    </div>
</div>

<p>Â Â Â Â  AND gates can be constructed using a stream which weâ€™ll call X that runs perpendicular to two parallel input streams, A and B. B will also act as the output stream, once it crosses X. A and X can be stopped using a glider eater</p>
:ET