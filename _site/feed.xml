<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-23T10:54:28+05:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Markov Chains - Part 1</title><link href="http://localhost:4000/blog/MC-p1-copy/" rel="alternate" type="text/html" title="Markov Chains - Part 1" /><published>2022-08-09T00:00:00+05:00</published><updated>2022-08-09T00:00:00+05:00</updated><id>http://localhost:4000/blog/MC-p1%20copy</id><content type="html" xml:base="http://localhost:4000/blog/MC-p1-copy/"><![CDATA[<h2 id="setting-the-stage">Setting the Stage</h2>

<!-- Let's suppose I have started recording all the days that it has rained this month where I live. At the end of the month, the recordings show that it has rained 15 out of the 30 days of the month. What can I say about the probability that it rained on any given day of that month?  -->

<p>There has recently been an outbreak of a dangerous new virus called OompaVirus! The world’s top scientists and reasearchers have been hard at work and have come up with the following statistics:</p>

<ul>
  <li>On any given day, there is a 30% chance that you contract OompaVirus</li>
  <li>If you have contracted OompaVirus, there is a 5% chance that you recover from it on any given day of you being sick</li>
</ul>

<p>As you scroll through the various headlines, you see that 20% of the population has already contracted OompaVirus. Your birthday is in 20 days and you want to know the probability that you will be healthy to celebrate it.</p>

<p>If you start solving this problem on paper, it may prove to be a bit harder than it initially seemed to be. At the start of every day, there are two possible outcomes: you either have the virus, or you don’t. The tricky part about this problem is that each of those two outcomes depend only on your state the previous day. If you try to draw a tree of these possible outcomes after each day, you will start to find yourself lost in a binary tree that has a depth of 20. Trying to sum up the probability of each route and its outcome to get your answer is a tedious process. Our goal with Markov chains is to create a model of such a system and answer questions like this with simple equations.</p>

<h2 id="the-markov-chain">The Markov Chain</h2>

<!-- A Markov Chain is simply a model of a system in which something can change states over some unit time. In our example that 'something' would be the weather changing its state from rainy to sunny and our unit time would be one day The crux of this model lies in how we model changes in states. Instead of modeling them as fixed percentages, we model them as transitions of states. Instead of saying there is a 50% chance that it rained on any given day, we might say that every next day in that month, there was a 20% chance of transitioning from a rainy day to a sunny day, and an 80% chance of transitioning from a rainy day to a rainy day. 

We usually represent these Markov chains in two different ways: A transition diagram or a transition probability matrix. Let's first take a look at the former. Transition diagrams are really just directional graphs with the weights of edges representing the probability of transition from the first node to the second after 1 unit time. Therefore, the sum of all outbound edge weights should always be 1 (or 100%). -->

<p>All a Markov chain really does is model a system where the state of something changes after every unit time depending on its current state. In our case, the unit time is one day and our states are either healthy or infected. Generally, there are two ways we can represent a Markov chain: through a transition diagram, and through a transition probability matrix. Let’s first take a look at the former.</p>

<p>A transition diagram is essentially a weighted directed graph with nodes representing states and edges representing transitions. The weights of these edges, therefore, represent the probability that the transition will occur after 1 unit time. The transition diagram for our example would look something like this:</p>

<p>IMAGE</p>

<p>This representation is very useful for understanding a Markov chain but it is not quite practical for mathematical operations. That’s why mathematicians usually prefer matrix notation. We can condense this diagram into a matrix where the entry at \(i,j\) is the probability that we will transition from state \(i\) to state \(j\) after 1 unit time. We can create this matrix with the label \(v\) representing the infected state, and the label \(h\) representing the healthy state, like so:</p>

\[\begin{array}{c c c} &amp; &amp;

\begin{array}{c c} v &amp; h \\
\end{array} 
\\

P  = &amp;
\begin{array}{c c }
v \\
h
\end{array}
&amp;
\left[
\begin{array}{c c c}
0.95 &amp; 0.05  \\
0.3 &amp; 0.7 
\end{array}
\right]

\end{array}\]

<h2 id="state-distibution-matricies">State distibution Matricies</h2>

<!-- Now that we have a matrix representation of our markov chains, we can start doing all sorts of operations on it. Before we go any further though, I want to introduce the idea of a state distribution matrix. Remember that we were also given one more piece of information - the percent of global population infected at the start of 2056. Specifically, we were told that 20% of the global population had already been infected. We can create a matrix, $$S_0$$,  that represents this initial state distribution like so: -->

<p>Another matrix we will we will be using to solve this problem is known as the state distribution matrix. The \(n\)<sup>th</sup> state distribution matrix represents the probability that any given person is in one state or another, on day \(n\). In our case, that just means the portion of the population that infected on the \(n\)<sup>th</sup> day. Our zeroth state distribution matrix (AKA initial state distribution matrix) would therefore be …</p>

\[\begin{array}{c} 

\begin{array}{c c}&amp;&amp;v &amp; h \\
\end{array} 
\\
S_0 = 
\left[
\begin{array}{c c }
0.2 &amp; 0.8 \\
\end{array}
\right]

\end{array}\]

<p>Now, if I want to find the portion of the population that is infected by tommorow, all I have to do is take the sum of the following:</p>
<ul>
  <li>the portion of healthy people multiplied by the probability that a healthy person contracts the virus at the end of one day</li>
  <li>the portion of infected people multiplied by the probability that an infected person remains infected at the end of one day</li>
</ul>

<p>Matrix multiplication allows us to do just that. If we multiply the \(n\)<sup>th</sup> state distribution matrix by the transition probability matrix, we will get the \(n+1\)<sup>th</sup> state distribution matrix.</p>

\[S_0 * P = S_1 \\



\left[
\begin{array}{c c }
0.2 &amp; 0.8 \\
\end{array}
\right]



\left[
\begin{array}{c c c}
0.95 &amp; 0.05  \\
0.3 &amp; 0.7 
\end{array}
\right]

= 

\left[
\begin{array}{c c }
0.43 &amp; 0.57 \\
\end{array}
\right]\]

<p>Going back to the question, let’s see if there is a way to find the \(n\)<sup>th</sup> state distribution matrix using only the initial state distribution matrix. Since we know how to update our state distribution by one day, surely we can repeat the process to find the state distribution matrix of the \(n\)<sup>th</sup> day. Let’s see how we would do this with \(n=4\).</p>

\[S_0 * P = S_1 \\
S_1 * P = S_2 \\

\therefore \\

(S_0 * P) * P = S_2 \\
((S_0 * P) * P) * P = S_3 \\
(((S_0 * P) * P) * P) * P= S_4\]

<p>This is no doubt a messy equation, but recall that matrix multiplication is associative (i.e. you can move the parenthesis around without changing the answer)</p>

\[(((S_0 * P) * P) * P ) * P = S_4\\
S_0 * (P*P*P*P) = S_4\\
S_0 * P^4 = S_4\]

<p>More generally,</p>

\[S_n = S_0 * P^n\]

<p>To answer our initial question,</p>

\[S_0 * P^{20} = S_20 \\

\left[
\begin{array}{c c }
0.2 &amp; 0.8 \\
\end{array}
\right]



\left[
\begin{array}{c c c}
0.857 &amp; 0.143  \\
0.857 &amp; 0.143 
\end{array}
\right]

= 

\left[
\begin{array}{c c }
0.857 &amp; 0.143 \\
\end{array}
\right]\]

<p>There is an 85.7% chance that we will be infected on the day of our birthday.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Setting the Stage]]></summary></entry><entry><title type="html">A Gentle Introduction to Dynamic Programming</title><link href="http://localhost:4000/blog/intro-to-DP/" rel="alternate" type="text/html" title="A Gentle Introduction to Dynamic Programming" /><published>2022-07-18T00:00:00+05:00</published><updated>2022-07-18T00:00:00+05:00</updated><id>http://localhost:4000/blog/intro-to-DP</id><content type="html" xml:base="http://localhost:4000/blog/intro-to-DP/"><![CDATA[<h2 id="setting-the-stage">Setting the Stage</h2>

<p>Most brute force algorithms that we have written until now are quite boring. They do the same thing over and over again, recursively running some calculations until they find the answer. Such algorithms are usually the simplest solution to problems, and as it is with many simple solutions to problems, they are quite often inefficient. Our objective with dynamic programming is to introduce a style of programming in which we utilize our previous calculations to speed up our algorithm. It may sound simple because it really is very simple.</p>

<p>Essentially what we do is we split up our problem into smaller subproblems that can easily be solved. Then, whenever we solve one of these subproblems, we remember the answer so that we can use it later on to solve more subproblems. Let’s take a look at the most common example when it comes to dynamic programming: finding the nth Fibonacci number.</p>

<h2 id="finding-the-nth-fibonacci-number">Finding the Nth Fibonacci number</h2>

<p>For the uninitiated, the Fibonacci numbers are a series of numbers, starting from 0 and 1, in which each number is the sum of the two numbers before it. Mathematically, the sequence can be defined as</p>

\[F_{0} = 0\]

\[F_{1} = 1\]

\[F_{n} = F_{n-1} + F_{n-2}\]

<p>Walking through an example, the third Fibonacci number would be the sum of 0 and 1 which is 1. Similarly, the fourth Fibonacci number would be the sum of 1 and 1, which is 2. Continuing the pattern we get an infinite sequence of numbers that look like so:</p>

\[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\]

<p>The problem at hand is to find the nth Fibonacci number. Before we dive into how we could solve this with dynamic programming, let’s try to solve this with a brute force algorithm.</p>

<p>A naïve solution to this problem is to create a recursive function that returns the <code class="highlighter-rouge">n</code>th Fibonacci number by taking the sum of the previous two Fibonacci numbers. Our base case for the function will be the first and second Fibonacci numbers which we know are 0 and 1 respectively. Let’s implement this in python.</p>

<div class="language-python code highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">function</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
  <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">&lt;=</span><span class="mi">2</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="c1">#returns 0 and 1 for fib(1) and fib(2) respectively
</span>  <span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>This solution works. If we input 5, the <code class="highlighter-rouge">fib</code> function will call <code class="highlighter-rouge">fib(4)</code> and <code class="highlighter-rouge">fib(3)</code> summing their results. <code class="highlighter-rouge">fib(4)</code> and <code class="highlighter-rouge">fib(3)</code> will also do the same, calling and summing their predecessors until we reach our base case.</p>

<h2 id="memoization">Memoization</h2>

<p>The algorithm that we have just implemented is, although straighforward, not very efficient. To get a feel for this we can draw a diagram of all the recursive calls to <code class="highlighter-rouge">fib()</code></p>

<div class="figure">
    <img src="/assets/images/intro-to-dp/1.png" style="height: 200px; display: block; margin: 0 auto;" />
    <div class="caption">
        <span class="caption-label">Figure 1.</span> A graphical representation of the brute force algorithm in which each node represents a call to the fib function with that input.
    </div>
</div>

<p>This tree does seem a bit scary in terms of time complexity, but I do see a way we can make this algorithm much more efficient. Notice how some nodes are being repeated which means that sometimes <code class="highlighter-rouge">fib()</code> is being called on the same input over and over again.  This is really bad because not only is <code class="highlighter-rouge">fib()</code> getting called again but all of its children recursive calls as well. In fact, as n gets larger and larger, this happens more and more frequently. Why don’t we store all the return values from <code class="highlighter-rouge">fib()</code> in one big n-sized array so that we can look up our answer if we have computed it before? For example whenever we compute <code class="highlighter-rouge">fib(x)</code> we can store the result in <code class="highlighter-rouge">array[x]</code>. Now we can look up our answer in <code class="highlighter-rouge">O(1)</code> time before each recursive call. This process of storing results of subproblems in an array to prevent needlessly computing the results of those subproblems again is known as memoization (deriving its name from the idea of noting down our answer on a ‘memo notepad’). We just have to add a few lines of code to implement this.</p>

<div class="language-python code highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">memo</span><span class="p">):</span>
  <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">&lt;=</span><span class="mi">2</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="c1">#returns 0 and 1 for fib(1) and fib(2) respectively
</span>  <span class="k">if</span><span class="p">(</span><span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</code></pre></div></div>

<p>If you think about it, this algorithm takes <code class="highlighter-rouge">O(n)</code> time since we call <code class="highlighter-rouge">fib()</code> on every number less than the initial n and we never repeat calls on the same input. This is much better, but there is still room for some slight improvements in space complexity.</p>

<h2 id="tabulation">Tabulation</h2>

<p>As suggested by the previous sentence, the space complexity of our algorithm is still not optimal. You may notice that with this solution we are effectively working our way down the Fibonacci numbers until we get to the base case. However, there isn’t anything stopping us from going the other way, working our way up from the base case until we reach the value of <code class="highlighter-rouge">fib(n)</code>. We can do that since we know:</p>

\[F_{n} = F_{n-1} + F_{n-2}\]

\[\therefore\]

\[F_{n+1} = F_{n} + F_{n-1}\]

<p>We can initialize an array that we fill first with the initial values of 0 and 1. Then we can iteratively append the sum of the last 2 elements in the array as per the second equation above. Now, we have a solution with <code class="highlighter-rouge">O(n)</code> time complexity and <code class="highlighter-rouge">O(n)</code> space complexity. Awesome.  This method is known as tabulation since we are ‘filling up a table’, in a bottom-up style until we get our answer.</p>

<div class="language-python code highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
  <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>
  <span class="k">return</span> <span class="n">table</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="wrapping-up">Wrapping up</h2>

<p>Hopefully, these two concepts will help you understand where to start with dynamic programming problems, however dynamic programming is a concept that can only truly be learnt through practice. Only through solving various problems can you really understand when and how to use these tools correctly.</p>

<p>As a general rule of thumb, I find it easiest to find memorization solutions to problems by first dividing my problem into subproblems which can be solved by brute force (often a byproduct of coming up with a brute force solution). Then I can go ahead and memorize the solution, finding where calculations are being repeated and storing them in some list. Tabulation is similar. I like to first divide the problem into subproblems and then figure out if one’s answer is simply a small update away from the previous answer. Again, easier said then done.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Setting the Stage]]></summary></entry><entry><title type="html">Hello World</title><link href="http://localhost:4000/blog/hello-world/" rel="alternate" type="text/html" title="Hello World" /><published>2022-04-03T00:00:00+05:00</published><updated>2022-04-03T00:00:00+05:00</updated><id>http://localhost:4000/blog/hello-world</id><content type="html" xml:base="http://localhost:4000/blog/hello-world/"><![CDATA[<p>Hello! Welcome to my blog.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Hello! Welcome to my blog.]]></summary></entry></feed>